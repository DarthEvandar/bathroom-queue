{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateQueue","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","axios","get","sent","setState","queue","data","stop","onChange","event","value","target","state","completed","_this2","_this$state","classes","suggestions","react_default","createElement","className","main","index_es","paper","component","variant","container","TextField_default","fullWidth","label","validEmail","InputProps","input","type","color","onClick","post","concat","then","catch","error","map","item","text","Component","withStyles","_ref","palette","spacing","breakpoints","createStyles","root","height","flexGrow","display","justifyContent","alignItems","position","marginTop","unit","width","suggestionsContainerOpen","zIndex","left","right","suggestion","suggestionsList","margin","padding","listStyleType","divider","flexDirection","defineProperty","marginLeft","marginRight","up","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4WAgEMA,cACJ,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAURQ,YAXwBN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAWV,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACWC,IAAMC,IAAI,qDADrB,OACNN,EADME,EAAAK,KAEZpB,EAAKqB,SAAS,CACZC,MAAOT,EAASU,KAAKD,QAHX,wBAAAP,EAAAS,SAAAZ,MAXUZ,EAkBxByB,SAAW,SAACC,GACV1B,EAAKqB,SAAS,CACZM,MAAOD,EAAME,OAAOD,SAjBtB3B,EAAK6B,MAAQ,CACXF,MAAO,GACPG,WAAW,EACXR,MAAO,IAETtB,EAAKO,cARiBP,wEAwBf,IAAA+B,EAAA5B,KAAA6B,EACwB7B,KAAK0B,MAA5BF,EADDK,EACCL,MACAM,GAFDD,EACQE,YACK/B,KAAKJ,MAAjBkC,SAER,OACEE,EAAAzB,EAAA0B,cAAA,WACED,EAAAzB,EAAA0B,cAAA,QAAMC,UAAWJ,EAAQK,MACvBH,EAAAzB,EAAA0B,cAACG,EAAA,EAAD,OACEpC,KAAK0B,MAAMC,WAAaK,EAAAzB,EAAA0B,cAACG,EAAA,EAAD,CAAOF,UAAWJ,EAAQO,OAClDL,EAAAzB,EAAA0B,cAACG,EAAA,EAAD,CAAYE,UAAU,KAAKC,QAAQ,MAAnC,gBAGAP,EAAAzB,EAAA0B,cAAA,OAAKC,UAAWJ,EAAQU,WACtBR,EAAAzB,EAAA0B,cAACQ,EAAAlC,EAAD,CACEmC,WAAS,EACTpB,SAAUtB,KAAKsB,SACfqB,MAAO3C,KAAK0B,MAAMkB,WAAW,GAAG,aAChCC,WAAc,CACZf,QAAS,CACPgB,MAAOhB,EAAQgB,WAKvBd,EAAAzB,EAAA0B,cAAA,OAAKC,UAAWJ,EAAQU,WACtBR,EAAAzB,EAAA0B,cAACG,EAAA,EAAD,CACEW,KAAK,SACLL,WAAS,EACTH,QAAQ,YACRS,MAAM,UACNC,QAAS,WACPlC,IAAMmC,KAAN,mDAAAC,OAA8D3B,GAAS,IAEpE4B,KAAK,SAAC1C,GACPkB,EAAKV,SAAS,CACZS,WAAW,IAEbC,EAAKxB,gBACJiD,MAAM,SAACC,GACR1B,EAAKV,SAAS,CACZS,WAAW,IAEbC,EAAKxB,kBAjBX,QAyBF4B,EAAAzB,EAAA0B,cAAA,WACAD,EAAAzB,EAAA0B,cAACG,EAAA,EAAD,MACCpC,KAAK0B,MAAMP,MAAMoC,IAAI,SAACC,GACrB,OAAOxB,EAAAzB,EAAA0B,cAACG,EAAA,EAAD,CAAYE,UAAU,MAAMkB,MAGtCxD,KAAK0B,MAAMC,WAAaK,EAAAzB,EAAA0B,cAACG,EAAA,EAAD,CAAOF,UAAWJ,EAAQO,OAC/CL,EAAAzB,EAAA0B,cAACG,EAAA,EAAD,MACAJ,EAAAzB,EAAA0B,cAAA,OAAKC,UAAWJ,EAAQ2B,MACtBzB,EAAAzB,EAAA0B,cAACG,EAAA,EAAD,CAAYE,UAAU,KAAKC,QAAQ,MAAnC,aAIJP,EAAAzB,EAAA0B,cAACG,EAAA,EAAD,MACCpC,KAAK0B,MAAMP,MAAMoC,IAAI,SAACC,GACrB,OAAOxB,EAAAzB,EAAA0B,cAACG,EAAA,EAAD,CAAYE,UAAU,MAAMkB,eA1F/BE,aAmGHC,uBAzJA,SAAAC,KAAGC,QAAH,IAAYC,EAAZF,EAAYE,QAASC,EAArBH,EAAqBG,YAArB,OAA8CC,uBAAa,CACxEC,KAAM,CACJC,OAAQ,IACRC,SAAU,EACVC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAEd9B,UAAW,CACT+B,SAAU,WACVC,UAA0B,EAAfV,EAAQW,KACnBC,MAAO,kBAETC,yBAA0B,CACxBJ,SAAU,WACVK,OAAQ,EACRJ,UAAWV,EAAQW,KACnBI,KAAM,EACNC,MAAO,GAETC,WAAY,CACVX,QAAS,SAEXY,gBAAiB,CACfC,OAAQ,EACRC,QAAS,EACTC,cAAe,QAEjBC,QAAS,CACPlB,OAAuB,EAAfJ,EAAQW,MAElBpC,MAAO,CACLmC,UAA0B,EAAfV,EAAQW,KACnBL,QAAS,OACTiB,cAAe,SACff,WAAY,SACZY,QAAO,GAAA/B,OAAoB,EAAfW,EAAQW,KAAb,OAAAtB,OAA0C,EAAfW,EAAQW,KAAnC,OAAAtB,OAAgE,EAAfW,EAAQW,KAAzD,OAETtC,KAAKrC,OAAAwF,EAAA,EAAAxF,CAAA,CACH4E,MAAO,OACPN,QAAS,QACTmB,WAA2B,EAAfzB,EAAQW,KACpBe,YAA4B,EAAf1B,EAAQW,MACpBV,EAAY0B,GAAG,IAAqB,EAAf3B,EAAQW,KAAW,GAAK,CAC5CC,MAAO,IACPa,WAAY,OACZC,YAAa,SAGjB/B,KAAM,CACJiC,UAAW,aAuGA/B,CAAmBhE,GCvJdgG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAzB,EAAA0B,cAACiE,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,KAAK,SAAAoD,GACjCA,EAAaC","file":"static/js/main.e9a7e47a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Paper, InputAdornment, IconButton, Typography, CssBaseline, Button } from '@material-ui/core';\nimport axios from 'axios';\n\nconst styles = ({ palette, spacing, breakpoints }: Theme) => createStyles({\n  root: {\n    height: 500,\n    flexGrow: 1,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  container: {\n    position: 'relative',\n    marginTop: spacing.unit * 3,\n    width: 'fill-available'\n  },\n  suggestionsContainerOpen: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: spacing.unit,\n    left: 0,\n    right: 0,\n  },\n  suggestion: {\n    display: 'block',\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none',\n  },\n  divider: {\n    height: spacing.unit * 2,\n  },\n  paper: {\n    marginTop: spacing.unit * 8,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: `${spacing.unit * 2}px ${spacing.unit * 3}px ${spacing.unit * 3}px`,\n  },\n  main: {\n    width: 'auto',\n    display: 'block', // Fix IE 11 issue.\n    marginLeft: spacing.unit * 3,\n    marginRight: spacing.unit * 3,\n    [breakpoints.up(400 + spacing.unit * 3 * 2)]: {\n      width: 500,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  text: {\n    textAlign: 'center'\n  }\n});\n\nclass App extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      value: '',\n      completed: false,\n      queue: []\n    }\n    this.updateQueue();\n  }\n\n  updateQueue = async () => {\n    const response = await axios.get('https://gatekeeper.sundheim.online/bathroom/queue');\n    this.setState({\n      queue: response.data.queue\n    });\n  }\n\n  onChange = (event: any) => {\n    this.setState({\n      value: event.target.value\n    })\n  }\n\n  render() {\n    const { value, suggestions } = this.state;\n    const { classes } = this.props;\n    \n    return (\n      <div>\n        <main className={classes.main}>\n          <CssBaseline />\n          {!this.state.completed && <Paper className={classes.paper}>\n            <Typography component=\"h1\" variant=\"h5\">\n              Add to Queue\n            </Typography>\n            <div className={classes.container}>\n              <TextField\n                fullWidth\n                onChange={this.onChange}\n                label={this.state.validEmail?'':'Enter Name'}\n                InputProps = {{\n                  classes: {\n                    input: classes.input,\n                  },\n                }}\n              />\n            </div>\n            <div className={classes.container}>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  axios.post(`https://gatekeeper.sundheim.online/bathroom/add/${value}`, {\n                    \n                  }).then((response) => {\n                    this.setState({\n                      completed: true,\n                    });\n                    this.updateQueue();\n                  }).catch((error) => {\n                    this.setState({\n                      completed: true\n                    });\n                    this.updateQueue();\n                  });\n                  \n                }}\n              >\n                Add\n              </Button>\n            </div>\n            <br />\n            <CssBaseline />\n            {this.state.queue.map((item: string) => {\n              return <Typography component=\"h3\">{item}</Typography>\n            })}\n          </Paper>}\n          {this.state.completed && <Paper className={classes.paper}>\n              <CssBaseline />\n              <div className={classes.text}>\n                <Typography component=\"h1\" variant=\"h5\">\n                  Success!\n                </Typography>\n              </div>\n            <CssBaseline />\n            {this.state.queue.map((item: string) => {\n              return <Typography component=\"h3\">{item}</Typography>\n            })}\n          </Paper>}  \n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}